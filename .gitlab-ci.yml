stages:
  - build
  - test
  - build CI image
  - plan production
  - apply production

default:
  image: docker:27
  services:
    - name: docker:27-dind
      alias: docker

variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

build:
  stage: build
  variables:
    BUILDPLATFORM: linux/amd64
    BUILDARCH: amd64
  interruptible: true
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull "$CI_REGISTRY/chrisleekr/multicloud-k8s-iac:cache" || true
    - >
      docker buildx build . --pull
      --cache-from=$CI_REGISTRY/chrisleekr/multicloud-k8s-iac:cache
      --build-arg BUILDKIT_INLINE_CACHE=1
      --progress plain -t
      $CI_REGISTRY/chrisleekr/multicloud-k8s-iac:build-$CI_COMMIT_SHORT_SHA
      -t $CI_REGISTRY/chrisleekr/multicloud-k8s-iac:cache
    - docker push $CI_REGISTRY/chrisleekr/multicloud-k8s-iac:cache
    - docker push
      $CI_REGISTRY/chrisleekr/multicloud-k8s-iac:build-$CI_COMMIT_SHORT_SHA

lint-helm:
  stage: test
  image: $CI_REGISTRY/chrisleekr/multicloud-k8s-iac:build-$CI_COMMIT_SHORT_SHA
  interruptible: true
  artifacts:
    paths:
      - helm/nvm/template
      - helm/nvm-db/template
    expire_in: "7 days"
  script:
    - ./scripts/validate-helm.sh

lint-terraform:
  stage: test
  image: $CI_REGISTRY/chrisleekr/multicloud-k8s-iac:build-$CI_COMMIT_SHORT_SHA
  interruptible: true
  script:
    - ./scripts/validate-terraform.sh

production:
  stage: build CI image
  interruptible: true
  only:
    - master
  before_script:
    - apk add curl git jq
    - mkdir -p ~/.docker/cli-plugins/
    - BUILDX_LATEST_BIN_URI=$(curl -s -L
      https://api.github.com/repos/docker/buildx/releases/latest | jq
      --raw-output '.assets[] | select(.name | contains ("linux-amd64")) |
      .browser_download_url')
    - curl -s -L ${BUILDX_LATEST_BIN_URI} -o ~/.docker/cli-plugins/docker-buildx
    - chmod a+x ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker context create dind
    - docker buildx create --driver docker-container --use dind --driver-opt image=moby/buildkit:buildx-stable-1,network=host --name buildkit-$CI_COMMIT_SHORT_SHA
  script:
    - docker buildx build --progress plain --platform
      linux/amd64,linux/arm64 --pull --tag
      $CI_REGISTRY/chrisleekr/multicloud-k8s-iac:latest --push .
  after_script:
    - docker buildx stop buildkit-$CI_COMMIT_SHORT_SHA
    - docker buildx rm buildkit-$CI_COMMIT_SHORT_SHA

plan-gke:
  stage: plan production
  image: $CI_REGISTRY/chrisleekr/multicloud-k8s-iac:build-$CI_COMMIT_SHORT_SHA
  interruptible: false
  only:
    - master
  variables:
    GOOGLE_APPLICATION_CREDENTIALS_encoded: $GOOGLE_APPLICATION_CREDENTIALS_encoded
    GOOGLE_DEFAULT_PROJECT_ID: $GOOGLE_DEFAULT_PROJECT_ID
    TF_WORKSPACE: $TERRAFORM_WORKSPACE
    TF_TOKEN_app_terraform_io: $APP_TERRAFORM_IO
    TF_VAR_google_org_id: $GOOGLE_ORG_ID
    TF_VAR_google_billing_account_id: $GOOGLE_BILLING_ACCOUNT_ID
  script:
    - source container/root/.bashrc
    - gcloud auth list
    - cd workspaces/google/terraform/
    - terraform init -input=false
    - terraform workspace list
    - terraform plan -input=false -out=deploy.plan
  artifacts:
    paths:
      - workspaces/google/terraform/deploy.plan
    untracked: false
    when: on_success
    expire_in: "1 day"

apply-gke:
  stage: apply production
  image: $CI_REGISTRY/chrisleekr/multicloud-k8s-iac:build-$CI_COMMIT_SHORT_SHA
  interruptible: false
  when: manual
  only:
    - master
  dependencies:
    - plan-gke
  variables:
    GOOGLE_APPLICATION_CREDENTIALS_encoded: $GOOGLE_APPLICATION_CREDENTIALS_encoded
    GOOGLE_DEFAULT_PROJECT_ID: $GOOGLE_DEFAULT_PROJECT_ID
    TF_WORKSPACE: $TERRAFORM_WORKSPACE
    TF_TOKEN_app_terraform_io: $APP_TERRAFORM_IO
    TF_VAR_google_org_id: $GOOGLE_ORG_ID
    TF_VAR_google_billing_account_id: $GOOGLE_BILLING_ACCOUNT_ID
  script:
    - source container/root/.bashrc
    - ls -alh
    - gcloud auth list
    - cd workspaces/google/terraform/
    - ls -alh
    - terraform init -input=false
    - terraform workspace list
    - terraform apply -auto-approve -input=false deploy.plan
